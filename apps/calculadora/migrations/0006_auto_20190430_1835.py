# Generated by Django 2.2 on 2019-04-30 21:35

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('calculadora', '0005_auto_20190430_0140'),
    ]

    operations = [
        migrations.CreateModel(
            name='Carta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Carta',
                'verbose_name_plural': 'Cartas',
            },
        ),
        migrations.CreateModel(
            name='Compra',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.DecimalField(decimal_places=2, help_text='Este es el monto total de la compra', max_digits=20, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Monto total')),
                ('fecha', models.DateTimeField(auto_now_add=True, help_text='Fecha en la que se registró este compra', verbose_name='Fecha de la compra')),
                ('comprador', models.ForeignKey(help_text='Usuario que realizó la compra', on_delete=django.db.models.deletion.DO_NOTHING, related_name='realiza', to=settings.AUTH_USER_MODEL, verbose_name='Comprador')),
            ],
            options={
                'verbose_name': 'Compra',
                'verbose_name_plural': 'Compras',
            },
        ),
        migrations.CreateModel(
            name='Continente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_continente', models.CharField(help_text='Nombre del continente', max_length=10, verbose_name='Continente')),
                ('codigo', models.CharField(help_text='Codigo del continente', max_length=2, unique=True)),
            ],
            options={
                'verbose_name': 'Continente',
                'verbose_name_plural': 'Continentes',
            },
        ),
        migrations.CreateModel(
            name='RedSocial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Indica el nombre de la reda social', max_length=20, verbose_name='Red Social')),
                ('url', models.URLField(editable=False, help_text='Dirección URL de la red social, en el formato: "https//www.redsocial.com"', max_length=100, verbose_name='Dirección URL')),
            ],
            options={
                'verbose_name': 'Red Social',
                'verbose_name_plural': 'Redes Sociales',
            },
        ),
        migrations.RenameField(
            model_name='restaurante',
            old_name='nombre_restaurante',
            new_name='nombre',
        ),
        migrations.RemoveField(
            model_name='ciudad',
            name='ubicacion',
        ),
        migrations.RemoveField(
            model_name='idiomaoficial',
            name='descripcion_idioma',
        ),
        migrations.RemoveField(
            model_name='monedaoficial',
            name='codigo_moneda',
        ),
        migrations.RemoveField(
            model_name='monedaoficial',
            name='signo',
        ),
        migrations.RemoveField(
            model_name='restaurante',
            name='ubicacion',
        ),
        migrations.AddField(
            model_name='ciudad',
            name='latitud',
            field=models.DecimalField(blank=True, decimal_places=6, help_text='La latitud está dada en grados decimales, entre 0° y 90 ° en el hemisferio Norte y entre 0° y -90° en el hemisferio Sur', max_digits=9, null=True, unique=True, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)], verbose_name='Latitud'),
        ),
        migrations.AddField(
            model_name='ciudad',
            name='longitud',
            field=models.DecimalField(blank=True, decimal_places=6, help_text='La longitud está dada en grados decimales, entre 0° y 180°, al este del meridiano de Greenwich y entre 0° y -180°, al oeste del meridiano de Greenwich.', max_digits=9, null=True, unique=True, validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)], verbose_name='Longitud'),
        ),
        migrations.AddField(
            model_name='idiomaoficial',
            name='iso_639_1',
            field=models.CharField(default=None, help_text='Indique el código del idioma en formato ISO 639-1 alpha-2. Por ejemplo, para el Español su codigo es "es"', max_length=2, unique=True, verbose_name='ISO 639-1'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='monedaoficial',
            name='iso_4217',
            field=models.CharField(default=None, help_text='Indique el código de la divisa en formato ISO 4217. Por ejemplo, para el peso argentino su codigo es "ARS"', max_length=2, unique=True, verbose_name='Codigo ISO 4217'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='monedaoficial',
            name='iso_4217_numerico',
            field=models.IntegerField(blank=True, help_text='Indique el código de la divisa en formato ISO 4217. Por ejemplo, para el peso argentino su codigo numérico es "32"', null=True, unique=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)], verbose_name='Codigo ISO 4217 Numérico'),
        ),
        migrations.AddField(
            model_name='monedaoficial',
            name='simbolo',
            field=models.CharField(blank=True, help_text='Símbolo de la moneda', max_length=8, null=True, verbose_name='Símbolo'),
        ),
        migrations.AddField(
            model_name='pais',
            name='iso_3166_1_2',
            field=models.CharField(blank=True, help_text='Indique el código del país en formato ISO 3166-1 alpha-2. Por ejemplo, para la bandera de la República de El Salvador es SV', max_length=2, null=True, verbose_name='Codigo ISO 3166-1 alpha-2'),
        ),
        migrations.AddField(
            model_name='pais',
            name='iso_3166_1_3',
            field=models.CharField(blank=True, help_text='Indique el código del país en formato ISO 3166-1 alpha-3. Por ejemplo, para la bandera de la República de El Salvador es SLV', max_length=2, null=True, verbose_name='Codigo ISO 3166-1 alpha-3'),
        ),
        migrations.AddField(
            model_name='restaurante',
            name='administrador',
            field=models.ForeignKey(default=None, help_text='Usuario que añadió este restaurante', on_delete=django.db.models.deletion.CASCADE, related_name='es_registrado_por', to=settings.AUTH_USER_MODEL, verbose_name='¿Quién lo registró?'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='restaurante',
            name='ciudad',
            field=models.ForeignKey(default=None, help_text='Seleccione la ciudad en la que está ubicado el restaurante.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='ubicado_en', to='calculadora.Ciudad', verbose_name='Ciudad'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='restaurante',
            name='latitud',
            field=models.DecimalField(blank=True, decimal_places=6, help_text='La latitud está dada en grados decimales, entre 0° y 90 ° en el hemisferio Norte y entre 0° y -90° en el hemisferio Sur', max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)], verbose_name='Latitud'),
        ),
        migrations.AddField(
            model_name='restaurante',
            name='longitud',
            field=models.DecimalField(blank=True, decimal_places=6, help_text='La longitud está dada en grados decimales, entre 0° y 180°, al este del meridiano de Greenwich y entre 0° y -180°, al oeste del meridiano de Greenwich.', max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)], verbose_name='Longitud'),
        ),
        migrations.AlterField(
            model_name='idiomaoficial',
            name='nombre_idioma',
            field=models.CharField(help_text='Nombre del idioma', max_length=20, verbose_name='Idioma'),
        ),
        migrations.AlterField(
            model_name='monedaoficial',
            name='nombre_divisa',
            field=models.CharField(help_text='Indique el nombre de la moneda. Por ejemplo, la moneda de Argentina se llama "Peso argentino"', max_length=20, verbose_name='Moneda'),
        ),
        migrations.CreateModel(
            name='TipoCarta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Ingrese el nombre de la carta', max_length=50, verbose_name='Nombre')),
                ('decripcion', models.CharField(help_text='Ingrese una breve descripción de esta carta (Entre 50 y 150 caracteres)', max_length=150, validators=[django.core.validators.MinLengthValidator(50)], verbose_name='Descripción')),
                ('tipo_principal', models.ForeignKey(blank=True, help_text='Seleccione una carta sí la carta que está por registrar es un subconjunto de alguna carta ya existente', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcartas', to='calculadora.TipoCarta', verbose_name='Carta Principal')),
            ],
            options={
                'verbose_name': 'Tipo de Carta',
                'verbose_name_plural': 'Tipos de Carta',
            },
        ),
        migrations.CreateModel(
            name='Producto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Ingrese el nombre del producto', max_length=100, verbose_name='Nombre del producto')),
                ('descripcion', models.TextField(help_text='Ingrese una breve descripción de este producto (entre 50 y 300 caracteres)', max_length=300, validators=[django.core.validators.MinLengthValidator(50)], verbose_name='Descripción del producto')),
                ('imagen', models.ImageField(help_text='Cargue una foto representativa de su producto', upload_to='Productos/', verbose_name='Foto del producto')),
                ('precio_fijo', models.DecimalField(blank=True, decimal_places=2, help_text='Ingrese el precio del producto fijado por el restaurante', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Precio')),
                ('carta', models.ForeignKey(help_text='Seleccione la carta a la que corresponde su producto', on_delete=django.db.models.deletion.CASCADE, related_name='pertenece_a', to='calculadora.Carta')),
            ],
            options={
                'verbose_name': 'Producto',
                'verbose_name_plural': 'Productos',
            },
        ),
        migrations.CreateModel(
            name='Precio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monto', models.DecimalField(decimal_places=2, help_text='Ingrese el precio al cual encontró este producto en el restaurante', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Precio')),
                ('fecha_adicion', models.DateTimeField(auto_now_add=True, help_text='Fecha en la que se registró este nuevo precio', verbose_name='Fecha del registro')),
                ('aprobaciones', models.IntegerField(blank=True, default=0, help_text='Se refiere al número de usuarios que han encontrado este producto a este mismo precio en dicho restaurante', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Aprobaciones')),
                ('desaprobaciones', models.IntegerField(blank=True, default=0, help_text='Se refiere al número de usuarios que han encontrado este producto a un precio diferente en dicho restaurante', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Aprobaciones')),
                ('moneda', models.ForeignKey(help_text='Moneda en la que se ha registrado este precio', on_delete=django.db.models.deletion.DO_NOTHING, related_name='dado_en', to='calculadora.MonedaOficial', verbose_name='Moneda')),
                ('usuario', models.ForeignKey(help_text='Usuario que registró este precio', on_delete=django.db.models.deletion.DO_NOTHING, related_name='agregado_por', to=settings.AUTH_USER_MODEL, verbose_name='Agregado por')),
            ],
            options={
                'verbose_name': 'Precio',
                'verbose_name_plural': 'Precios',
            },
        ),
        migrations.CreateModel(
            name='Perfil',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usuaio', models.CharField(help_text='Ingrese su nombre de usuario de esta red social', max_length=100)),
                ('url_perfil', models.URLField(help_text='Dirección URL de su perfil de la red social, en el formato similar a: "https//www.redsocial.com/miperfil"', max_length=100, verbose_name='Dirección URL del perfil')),
                ('propietario', models.ForeignKey(blank=True, help_text='Usuario al que le pertenece esta cuenta', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='es_propiedad_de', to=settings.AUTH_USER_MODEL, verbose_name='Propietario')),
                ('red_social', models.ForeignKey(help_text='Seleccione la red social a la que corresponde este perfil', on_delete=django.db.models.deletion.DO_NOTHING, related_name='red_social', to='calculadora.RedSocial', verbose_name='Red Social')),
                ('restaurante', models.ForeignKey(blank=True, help_text='Restaurante al que le pertenece esta cuenta', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='es_administrada_por', to='calculadora.Restaurante', verbose_name='Restaurante')),
            ],
            options={
                'verbose_name': 'Perfil',
                'verbose_name_plural': 'Perfiles',
            },
        ),
        migrations.CreateModel(
            name='Detalle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unidades', models.IntegerField(help_text='Unidades adquiridas del producto', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Unidades')),
                ('sub_total', models.DecimalField(decimal_places=2, help_text='Este es el monto facturado al adquirir "X" unidades del producto "Y" a "Z" unidades monetarias', max_digits=15, validators=[django.core.validators.MinValueValidator(1e-05)], verbose_name='Sub Total')),
                ('compra', models.ForeignKey(help_text='Compra a la que pertenece este detalle', on_delete=django.db.models.deletion.CASCADE, related_name='detallada_en', to='calculadora.Compra', verbose_name='Compra')),
                ('producto', models.ForeignKey(blank=True, help_text='Producto "Y" que ha sido adquirido en "X" unidades a "Z" unidades monetarias', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='presente_en', to='calculadora.Producto', verbose_name='Producto')),
            ],
            options={
                'verbose_name': ('Detalle de la Compra',),
                'verbose_name_plural': 'Detalles de Compra',
            },
        ),
        migrations.AddField(
            model_name='compra',
            name='vendedor',
            field=models.ForeignKey(help_text='Restaurante donde se realizó la compra', on_delete=django.db.models.deletion.DO_NOTHING, related_name='realizada_en', to='calculadora.Restaurante', verbose_name='Restaurante'),
        ),
        migrations.AddField(
            model_name='carta',
            name='restaurante',
            field=models.ForeignKey(help_text='Restaurante al que pertenece esta carta', on_delete=django.db.models.deletion.CASCADE, related_name='perteneciente_a', to='calculadora.Restaurante', verbose_name='Restaurante'),
        ),
        migrations.AddField(
            model_name='carta',
            name='tipo',
            field=models.ForeignKey(help_text='Seleccione el tipo de carta que posee este restaurante', on_delete=django.db.models.deletion.CASCADE, related_name='identificada_por', to='calculadora.TipoCarta', verbose_name='Tipo de carta'),
        ),
        migrations.CreateModel(
            name='Aprobacion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aprobado', models.BooleanField(help_text='Detalla si el usuario aprueba o no el precio indicado', verbose_name='Aprobado')),
                ('precio', models.ForeignKey(help_text='Precio en discución', on_delete=django.db.models.deletion.CASCADE, related_name='requiere_de', to='calculadora.Precio')),
                ('usuario', models.ForeignKey(help_text='Usuario que aprueba o no el precio indicado', on_delete=django.db.models.deletion.DO_NOTHING, related_name='es_aprobado_por', to=settings.AUTH_USER_MODEL, verbose_name='Usario')),
            ],
            options={
                'verbose_name': 'Aprobación',
                'verbose_name_plural': 'Aprobaciones',
            },
        ),
    ]
